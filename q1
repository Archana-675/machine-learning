import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
data = {
    'Study_Hours': [10, 20, 15, 25, 30, 5, 12],
    'Attendance_Rate': [90, 95, 80, 85, 70, 60, 75],
    'Socioeconomic_Status': ['Low', 'High', 'Medium', 'Low', 'High', 'Low', 'Medium'],
    'Test_Score': [75, 85, 70, 90, 95, 50, 65]
}
df = pd.DataFrame(data)
df = pd.get_dummies(df, columns=['Socioeconomic_Status'], drop_first=True)

# Features and target
X = df[['Study_Hours', 'Attendance_Rate', 'Socioeconomic_Status_High', 'Socioeconomic_Status_Medium']]
y = df['Test_Score']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train_sm = sm.add_constant(X_train)

# Fit the model
model = sm.OLS(y_train, X_train_sm).fit()

# Summary of the model
print(model.summary())
# Make predictions
X_test_sm = sm.add_constant(X_test)
y_pred = model.predict(X_test_sm)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
